{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","togglemode","for","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","prototype","PropTypes","string","isRequired","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.82884b5d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            \r\n            <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input class=\"form-check-input\"onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckChecked\" />\r\n  <label class=\"form-check-label\" for=\"flexSwitchCheckChecked\">Enable dark mode</label>\r\n</div>\r\n              \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps ={\r\n    title: \"Set title\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpclick = ()=>{\r\n        //console.log(\"Upper case was clicked\"+text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to upper case\",\"success\");\r\n    }\r\n    const handleLoclick = ()=>{\r\n        //console.log(\"Upper case was clicked\"+text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to lower case\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handlecopy = ()=>{\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied\",\"success\");\r\n    }\r\n    const handleextraspace = ()=>{\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"))\r\n        props.showAlert(\"extra spaces handled\",\"success\");\r\n    }\r\n    const [text,setText] = useState('');\r\n    //text=\"new text\";   -----> wrong way to change the state \r\n    // setText(\"new text\"); //correct way to change the state \r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='light'?'#073d72':'white'}}>\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'grey', color:props.mode==='light'?'#073d72':'white'}} id=\"mybox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpclick}>Convert to Upper Case</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoclick}>Convert to Lower Case</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handlecopy}>Copy text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleextraspace}>handle extra space</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='light'?'#073d72':'white'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.08 * text.split(\" \").length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n \n\n  const togglemode = ()=>{\n    if(mode ==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor =\"#073d72\";\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = \"Textutils- Dark mode\";\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor =\"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title = \"Textutils- Light mode\"; \n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analize\" mode={mode}/>\n          {/* </Route>\n        </Switch> */}\n          \n         \n      \n      {/* <About/> */}\n     \n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}